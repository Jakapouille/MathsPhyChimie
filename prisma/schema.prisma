// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                  @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String?              @unique
  password       String
  role           Role                 @default(STUDENT)
  groupId        Int?
  group          Group?               @relation(fields: [groupId], references: [id])
  academicYearId Int?
  academicYear   AcademicYear?        @relation(fields: [academicYearId], references: [id])
  exercises      UserExercise[]
  activities     UserActivity[]
  assignments    Assignment[]
  courseProgress UserCourseProgress[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model Group {
  id             Int           @id @default(autoincrement())
  name           String
  academicYearId Int?
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  users          User[]
  assignments    Assignment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model AcademicYear {
  id        Int      @id @default(autoincrement())
  name      String
  active    Boolean  @default(true)
  users     User[]
  groups    Group[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          Int                  @id @default(autoincrement())
  title       String
  content     String
  type        CourseType
  visible     Boolean              @default(false)
  publishedAt DateTime?
  videoUrl    String?
  order       Int                  @default(0)
  exercises   Exercise[]
  progress    UserCourseProgress[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model Template {
  id         Int            @id @default(autoincrement())
  title      String
  type       TemplateType
  content    String
  options    String[]
  config     Json
  exercises  Exercise[]
  activities UserActivity[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Exercise {
  id            Int            @id @default(autoincrement())
  templateId    Int
  template      Template       @relation(fields: [templateId], references: [id])
  courseId      Int
  course        Course         @relation(fields: [courseId], references: [id])
  visible       Boolean        @default(false)
  publishedAt   DateTime?
  userExercises UserExercise[]
  assignments   Assignment[]
  activities    UserActivity[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model UserExercise {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  score      Float?
  timeSpent  Int?
  clicks     Int?
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserActivity {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  exerciseId  Int?
  exercise    Exercise? @relation(fields: [exerciseId], references: [id])
  templateId  Int?
  template    Template? @relation(fields: [templateId], references: [id])
  pageId      String
  clicks      Int
  timeSpent   Int
  copied      Boolean
  scrollDepth Int
  date        DateTime  @default(now())
}

model Assignment {
  id         Int      @id @default(autoincrement())
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id])
  groupId    Int?
  group      Group?   @relation(fields: [groupId], references: [id])
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  assignedAt DateTime @default(now())
}

model UserCourseProgress {
  id          Int            @id @default(autoincrement())
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
  courseId    Int
  course      Course         @relation(fields: [courseId], references: [id])
  status      ProgressStatus @default(NOT_VIEWED)
  validatedAt DateTime?
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum TemplateType {
  QCM
  BUTTON
  TEXT
  RATIO
}

enum CourseType {
  LESSON
  EXERCISE_TEMPLATE
}

enum ProgressStatus {
  NOT_VIEWED
  VIEWED
  VALIDATED
}
